---
import { ViewTransitions } from "astro:transitions";
import { SiteMeta } from "@/configs/consts";


const { title, description, slug, keywords, image } = Astro.props;

const seoType  = "website";
const seoTitle = `${title} | ${SiteMeta.siteTitle}`;
const seoDescription = description ? description : `${SiteMeta.siteDesc}`;
const seoUrl = `${SiteMeta.siteUrl}${slug}`;
const seoImage = image ? image : `${SiteMeta.fallbackImage}`;
const seoKeywords = keywords ? keywords : [`${SiteMeta.fallbackKeywords}`];
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{seoTitle}</title>
<meta name="title" content={seoTitle} />
<meta name="description" content={seoDescription} />
<meta name='image' content={seoImage} />
<meta name='image:alt' content={seoDescription} />
<meta name='keywords' content={seoKeywords.join(', ')} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={seoType} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={seoTitle} />
<meta property="og:description" content={seoDescription} />
<meta property="og:image" content={seoImage} />
<meta property='og:image:alt' content={seoDescription} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={seoTitle} />
<meta property="twitter:description" content={seoDescription} />
<meta property="twitter:image" content={seoImage} />
<meta property="twitter:image:alt" content={seoDescription} />

<ViewTransitions />

<script is:inline>
  function init() {
    
    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    document.addEventListener("scroll", onScroll);
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());

  // Check if the theme is stored in localStorage
let theme = localStorage.getItem("theme");

// If not, check the user's system preference
if (!theme) {
  theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
}

  // Set the theme in localStorage
  localStorage.setItem("theme", theme);

  // Add the theme as a class on the html element
  document.documentElement.classList.add(theme);

  document.addEventListener('astro:page-load', () => {
    document.getElementById("themeToggle").addEventListener('click', () => {
      // Toggle the .dark class
      document.documentElement.classList.toggle("dark");

      // Check if the .dark class is present
      const isDark = document.documentElement.classList.contains("dark");

      // Set the theme based on whether the .dark class is present
      theme = isDark ? "dark" : "light";

      // Update the theme in localStorage
      localStorage.setItem("theme", theme);
    });
  });

  document.addEventListener('astro:after-swap', () => {
    // Get the theme from localStorage
    theme = localStorage.getItem("theme");

    // Add the theme as a class on the html element
    document.documentElement.classList.add(theme);
  });

</script>
